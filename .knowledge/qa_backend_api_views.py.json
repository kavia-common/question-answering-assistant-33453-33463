{"is_source_file": true, "format": "Python", "description": "This file defines REST API views for a Question-Answering backend service using Django REST Framework. It includes endpoints for health check, submitting questions to OpenAI, and retrieving Q&A history. It interacts with models and serializers for persistent storage and handles OpenAI client initialization and API calls.", "external_files": ["rest_framework.decorators", "rest_framework.response", "rest_framework", ".models", ".serializers", ".supabase_secret", "openai"], "external_methods": ["rest_framework.decorators.api_view", "rest_framework.response.Response", "rest_framework.status", "drf_yasg.utils.swagger_auto_schema", "get_openai_api_key_from_supabase", "OpenAI"], "published": ["health", "ask_question", "qa_history"], "classes": [], "methods": [{"name": "_get_openai_client()", "description": "Internal helper function to create an OpenAI client using API key from environment or Supabase secret store.", "scope": "", "scopeKind": ""}, {"name": "health(request)", "description": "Health check endpoint returning server status.", "scope": "", "scopeKind": ""}, {"name": "ask_question(request)", "description": "Endpoint to submit user questions and receive AI-generated answers, creating a Q&A record.", "scope": "", "scopeKind": ""}, {"name": "qa_history(request)", "description": "Endpoint to retrieve the list of Q&A records sorted by most recent.", "scope": "", "scopeKind": ""}], "calls": ["os.getenv", "get_openai_api_key_from_supabase", "OpenAI", "client.chat.completions.create", "QARecord.objects.create", "QARecordSerializer", "QARecordSerializer"], "search-terms": ["api_view", "OpenAI client", "qa_ask_question", "Q&A API", "health check", "question answer history", "Chat Completions API"], "state": 2, "file_id": 10, "knowledge_revision": 55, "git_revision": "77c3786c757eb06390f2b6dce07393256f46a5de", "revision_history": [{"33": "d19e8e8a22be2b85a949f6a3ecc81e7459f0ae0d"}, {"41": "d19e8e8a22be2b85a949f6a3ecc81e7459f0ae0d"}, {"44": "ef752fb6c58e572aebcf46390684af7e97ba26fe"}, {"49": "ef752fb6c58e572aebcf46390684af7e97ba26fe"}, {"55": "77c3786c757eb06390f2b6dce07393256f46a5de"}], "ctags": [{"_type": "tag", "name": "_get_openai_client", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def _get_openai_client():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "ask_question", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def ask_question(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def health(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}, {"_type": "tag", "name": "qa_history", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def qa_history(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}], "hash": "da48495a11e9fb29fa78cd6f4a5763ca", "format-version": 4, "code-base-name": "qa_backend", "filename": "qa_backend/api/views.py"}