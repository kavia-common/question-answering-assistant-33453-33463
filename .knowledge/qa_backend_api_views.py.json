{"is_source_file": true, "format": "Python", "description": "This is a Django REST Framework API views module for a Q&A service. It defines endpoints for health check, submitting questions to OpenAI's API, and retrieving Q&A history. The file includes helper functions for API key resolution and OpenAI client instantiation, as well as view functions with Swagger annotations for documentation.", "external_files": ["rest_framework.decorators", "rest_framework.response", "rest_framework", ".models", ".serializers", ".supabase_secret", "openai"], "external_methods": ["rest_framework.decorators.api_view", "rest_framework.response.Response", "rest_framework.status", "drf_yasg.utils.swagger_auto_schema", "QARecord.objects.create", "QARecord.objects.all", "QARecordSerializer", "AskQuestionSerializer", "get_openai_api_key_from_supabase"], "published": ["health", "ask_question", "qa_history"], "classes": [], "methods": [{"name": "Optional[str] _resolve_openai_api_key()", "description": "Resolves the OpenAI API key from environment variables or Supabase secret store.", "scope": "", "scopeKind": ""}, {"name": "Tuple[Optional[object],Optional[str]] _get_openai_client()", "description": "Creates and returns an OpenAI client instance if API key is available, or an error message.", "scope": "", "scopeKind": ""}, {"name": "ask_question(request)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "health(request)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "qa_history(request)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["os.getenv", "get_openai_api_key_from_supabase", "OpenAI", "QARecord.objects.create", "QARecordSerializer", "serializer.is_valid", "serializer.validated_data", "client.chat.completions.create"], "search-terms": ["questions", "OpenAI API", "Q&A", "health check", "views", "Swagger"], "state": 2, "file_id": 10, "knowledge_revision": 57, "git_revision": "c9cf758a55fd50b95da100c3bee3afc6b26621cd", "revision_history": [{"33": "d19e8e8a22be2b85a949f6a3ecc81e7459f0ae0d"}, {"41": "d19e8e8a22be2b85a949f6a3ecc81e7459f0ae0d"}, {"44": "ef752fb6c58e572aebcf46390684af7e97ba26fe"}, {"49": "ef752fb6c58e572aebcf46390684af7e97ba26fe"}, {"55": "77c3786c757eb06390f2b6dce07393256f46a5de"}, {"57": "c9cf758a55fd50b95da100c3bee3afc6b26621cd"}], "ctags": [{"_type": "tag", "name": "_get_openai_client", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def _get_openai_client() -> Tuple[Optional[object], Optional[str]]:$/", "language": "Python", "typeref": "typename:Tuple[Optional[object],Optional[str]]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_resolve_openai_api_key", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def _resolve_openai_api_key() -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "ask_question", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def ask_question(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def health(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}, {"_type": "tag", "name": "qa_history", "path": "/home/kavia/workspace/code-generation/question-answering-assistant-33453-33463/qa_backend/api/views.py", "pattern": "/^def qa_history(request):$/", "language": "Python", "kind": "function", "signature": "(request)"}], "hash": "db131e69f7843249346e47d18133cf67", "format-version": 4, "code-base-name": "qa_backend", "filename": "qa_backend/api/views.py"}