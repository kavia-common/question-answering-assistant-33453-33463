import os
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from drf_yasg.utils import swagger_auto_schema

from .models import QARecord
from .serializers import QARecordSerializer, AskQuestionSerializer
from .supabase_secret import get_openai_api_key_from_supabase

# Lazy import pattern for OpenAI client to avoid import errors when not needed
def _get_openai_client():
    """
    Internal helper to instantiate the OpenAI client if API key is present.
    Returns tuple (client, error_message). If client is None, error_message describes the issue.
    """
    api_key = os.getenv("OPENAI_API_KEY") or get_openai_api_key_from_supabase()
    if not api_key:
        return None, (
            "Missing OpenAI configuration. Please set the OPENAI_API_KEY environment variable "
            "or configure Supabase Secret Store and SUPABASE_* env vars so the backend can "
            "retrieve it securely."
        )
    try:
        from openai import OpenAI  # type: ignore
        client = OpenAI(api_key=api_key)
        return client, None
    except Exception as e:
        return None, f"Failed to initialize OpenAI client: {e}"


@api_view(['GET'])
def health(request):
    """
    Simple health check endpoint.

    Returns:
        200 OK with a JSON payload indicating server status.
    """
    return Response({"message": "Server is up!"})


# PUBLIC_INTERFACE
@swagger_auto_schema(
    method="post",
    operation_id="qa_ask_question",
    operation_summary="Submit a question",
    operation_description=(
        "Accepts a user question and returns an answer generated by OpenAI's API. "
        "The created Q&A record is returned. Requires OPENAI_API_KEY to be configured "
        "in the environment."
    ),
    request_body=AskQuestionSerializer,
    responses={
        201: QARecordSerializer,
        400: "Bad Request: invalid input",
        503: "Service Unavailable: OpenAI not configured or API error",
    },
    tags=["qa"]
)
@api_view(["POST"])
def ask_question(request):
    """
    Submit a question; returns AI-generated answer and record.

    Body:
        JSON object:
        - question (string): The user question to be answered.

    Returns:
        201 Created:
            QARecord object with fields: id, question, answer, created_at.
        400 Bad Request:
            When the input payload is invalid.
        503 Service Unavailable:
            When OpenAI API key is missing or the API call fails.
    """
    serializer = AskQuestionSerializer(data=request.data)
    if not serializer.is_valid():
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    question_text = serializer.validated_data["question"]

    client, init_error = _get_openai_client()
    if client is None:
        # Informative error about missing/misconfigured API key or init failure
        return Response(
            {"detail": init_error},
            status=status.HTTP_503_SERVICE_UNAVAILABLE
        )

    # Call OpenAI to get an intelligent answer
    try:
        # Using the Chat Completions API (gpt-4o-mini is a cost-effective intelligent model)
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a helpful assistant answering user questions clearly and concisely."},
                {"role": "user", "content": question_text},
            ],
            temperature=0.2,
        )
        answer_text = (completion.choices[0].message.content or "").strip()
        if not answer_text:
            answer_text = "I'm sorry, I couldn't generate an answer at this time."
    except Exception as e:
        return Response(
            {"detail": f"OpenAI API error: {e}"},
            status=status.HTTP_503_SERVICE_UNAVAILABLE
        )

    record = QARecord.objects.create(question=question_text, answer=answer_text)
    output = QARecordSerializer(record)
    return Response(output.data, status=status.HTTP_201_CREATED)


# PUBLIC_INTERFACE
@swagger_auto_schema(
    method="get",
    operation_id="qa_history",
    operation_summary="Get Q&A history",
    operation_description=(
        "Returns the list of Q&A records sorted by most recent first."
    ),
    responses={200: QARecordSerializer(many=True)},
    tags=["qa"]
)
@api_view(["GET"])
def qa_history(request):
    """
    Get recent Q&A history.

    Query Params:
        None

    Returns:
        200 OK:
            Array of QARecord items sorted by descending created_at.
    """
    records = QARecord.objects.all().order_by("-created_at")
    output = QARecordSerializer(records, many=True)
    return Response(output.data, status=status.HTTP_200_OK)
